import { useState, useCallback, useEffect } from "react";
import {
  Navigation,
  MapPin,
  Route,
  ArrowRight,
  Settings,
  ArrowUp,
  ArrowDown,
  ArrowLeft,
  RotateCcw,
  RotateCw,
  Navigation2,
  Car,
  Bike,
  Footprints,
  Users,
  RefreshCw,
} from "lucide-react";
import { GoogleMap as EnhancedGoogleMap } from "@/components/SimpleEnhancedGoogleMap";
import { SlideUpPanel } from "@/components/SlideUpPanel";
import { MagicNavbar } from "@/components/MagicNavbar";
import { useGeolocation } from "@/hooks/use-device-apis";
import { useMapTheme } from "@/hooks/use-map-theme";
import { useAuth } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { cn } from "@/lib/utils";
import { motion } from "framer-motion";
import { RealTimeSafetyFeatures } from "@/components/RealTimeSafetyFeatures";
import { RealTimeLocationShare } from "@/components/RealTimeLocationShare";
import { CustomCheckbox } from "@/components/ui/custom-checkbox";

import { LocationIndicator } from "@/components/LocationStatus";
import {
  SlideDownNotifications,
  useSlideDownNotifications,
} from "@/components/SlideDownNotifications";
import { LocationSharingInfoButton } from "@/components/LocationSharingInfo";
import AINavigationPanel from "@/components/AINavigationPanel";
import LocationAutocomplete from "@/components/LocationAutocomplete";
import GuardianNavigation from "@/components/GuardianNavigation";

export default function Index() {
  const { addNotification } = useSlideDownNotifications();
  const [fromLocation, setFromLocation] = useState("");
  const [toLocation, setToLocation] = useState("");
  const [isNavigating, setIsNavigating] = useState(false);
  const [routeInstructions, setRouteInstructions] = useState<string[]>([]);
  const [showAIPanel, setShowAIPanel] = useState(false);
  const [destination, setDestination] = useState<
    { lat: number; lng: number } | undefined
  >(undefined);
  const [turnByTurnInstructions, setTurnByTurnInstructions] = useState<
    Array<{
      instruction: string;
      distance: string;
      duration: string;
      maneuver?: string;
    }>
  >([]);
  const [routeSummary, setRouteSummary] = useState<{
    distance: string;
    duration: string;
  } | null>(null);
  const [travelMode, setTravelMode] = useState<
    "WALKING" | "DRIVING" | "BICYCLING"
  >("WALKING");
  const [routeSettings, setRouteSettings] = useState({
    showTraffic: false,
    satelliteView: false,
    showSafeZones: false,
    showEmergencyServices: false,
    showSafeAreaCircles: false,
    zoomLevel: 15,
    showDebug: false,
  });

  const { location, error, getCurrentLocation } = useGeolocation();
  const { mapTheme, mapType, toggleTheme, toggleMapType } = useMapTheme();
  const { userProfile } = useAuth();

  const emergencyContacts = userProfile?.emergencyContacts || [];

  const handleDirectionsChange = useCallback(
    (directions: google.maps.DirectionsResult | null) => {
      if (!directions || !directions.routes || directions.routes.length === 0) {
        setTurnByTurnInstructions([]);
        setRouteSummary(null);
        return;
      }

      const route = directions.routes[0];
      const leg = route.legs[0];

      // Extract route summary
      setRouteSummary({
        distance: leg.distance?.text || "Unknown distance",
        duration: leg.duration?.text || "Unknown duration",
      });

      // Extract step-by-step instructions
      const steps =
        leg.steps?.map((step, index) => ({
          instruction:
            step.instructions?.replace(/<[^>]*>/g, "") || `Step ${index + 1}`,
          distance: step.distance?.text || "",
          duration: step.duration?.text || "",
          maneuver: step.maneuver || undefined,
        })) || [];

      setTurnByTurnInstructions(steps);

      // Also update the basic route instructions for backward compatibility
      const basicInstructions = steps.map(
        (step, index) => `${index + 1}. ${step.instruction} (${step.distance})`,
      );
      setRouteInstructions(basicInstructions);
    },
    [],
  );

  const handleSearch = useCallback(async () => {
    if (!fromLocation || !toLocation) return;

    setIsNavigating(true);

    try {
      // Use Google Geocoding API to convert address to coordinates
      const geocoder = new google.maps.Geocoder();

      const geocodeResult = await new Promise<google.maps.GeocoderResult[]>(
        (resolve, reject) => {
          geocoder.geocode({ address: toLocation }, (results, status) => {
            if (status === google.maps.GeocoderStatus.OK && results) {
              resolve(results);
            } else {
              reject(new Error(`Geocoding failed: ${status}`));
            }
          });
        },
      );

      if (geocodeResult.length > 0) {
        const destinationCoords = {
          lat: geocodeResult[0].geometry.location.lat(),
          lng: geocodeResult[0].geometry.location.lng(),
        };

        setDestination(destinationCoords);

        // Start AI-enhanced navigation automatically when search is performed
        if (location) {
          console.log("🧭 Starting AI-Enhanced Navigation automatically...");

          const { aiEnhancedNavigation } = await import(
            "@/services/aiEnhancedNavigation"
          );

          const enhancedRoute = await aiEnhancedNavigation.startNavigation(
            { lat: location.latitude, lng: location.longitude },
            destinationCoords,
          );

          console.log("🚀 AI-Enhanced Route generated:", enhancedRoute);

          // Show AI Navigation Panel
          setShowAIPanel(true);

          // Subscribe to navigation updates
          aiEnhancedNavigation.subscribe((navigationState) => {
            console.log("📍 Navigation state update:", navigationState);

            // Show alerts if any
            if (navigationState.nextAlert) {
              const { message, severity, distance } = navigationState.nextAlert;
              console.log(`🚨 Alert in ${Math.round(distance)}m: ${message}`);
            }

            // Log dynamic alerts
            if (navigationState.route?.dynamicAlerts.length) {
              navigationState.route.dynamicAlerts.forEach((alert) => {
                console.log("🔔 Dynamic alert:", alert);
              });
            }
          });
        }
      } else {
        throw new Error("No results found for the destination");
      }
    } catch (error) {
      console.error("Navigation error:", error);

      // Fallback to a default location with user notification
      setDestination({
        lat: 37.7749,
        lng: -122.4194,
      });

      addNotification({
        type: "warning",
        title: "Location Not Found",
        message: `Could not find "${toLocation}". Using default location.`,
      });
    }

    // Generate route instructions based on travel mode
    const mockInstructions = [
      `Starting from ${fromLocation}`,
      travelMode === "WALKING"
        ? "Taking pedestrian-friendly route via Main Street"
        : travelMode === "BICYCLING"
          ? "Following bike-friendly route with dedicated lanes"
          : "Using optimal driving route via major roads",
      "Continue straight for 0.8 miles",
      "Turn right at the traffic light",
      `Arriving at ${toLocation}`,
    ];

    // Add traffic consideration if enabled
    if (routeSettings.showTraffic) {
      mockInstructions.splice(1, 0, "Traffic conditions: Light traffic ahead");
    }

    setRouteInstructions(mockInstructions);
  }, [fromLocation, toLocation, travelMode]);

  const handleUseCurrentLocation = useCallback(async () => {
    try {
      const currentLoc = await getCurrentLocation();
      setFromLocation(
        `${currentLoc.latitude.toFixed(4)}, ${currentLoc.longitude.toFixed(4)}`,
      );
      // Removed notification - silent location usage
    } catch (error: any) {
      console.error("Error getting current location:", error);

      const errorMessage = error?.message || "Unable to get your location";
      setFromLocation("���� Location unavailable - tap to retry");

      addNotification({
        type: "error",
        title: "Location Error",
        message: errorMessage,
        action: {
          label: "Try Again",
          onClick: handleUseCurrentLocation,
        },
        persistent: true,
      });
    }
  }, [getCurrentLocation, addNotification]);

  // Refresh route when travel mode changes
  useEffect(() => {
    if (destination && isNavigating) {
      // Small delay to ensure the map has processed the new travel mode
      const timer = setTimeout(() => {
        // The route will automatically refresh due to travelMode dependency in GoogleMap
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [travelMode, destination, isNavigating]);

  const handleSOSPress = useCallback(() => {
    console.log("SOS activated");
  }, []);
