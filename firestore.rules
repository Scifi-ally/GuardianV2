rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && request.auth.uid != null;
    }

    // Users collection - core user profiles
    match /users/{userId} {
      // Allow users to read and write their own profile
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Allow reading user profiles for guardian key lookup (limited fields)
      allow read: if isAuthenticated() && 
        resource.data.keys().hasAny(['displayName', 'guardianKey', 'uid']);
      
      // Ensure user can only create their own profile
      allow create: if isAuthenticated() && 
        isOwner(userId) && 
        request.resource.data.uid == request.auth.uid;
      
      // User notifications subcollection
      match /notifications/{notificationId} {
        // Users can manage their own notifications
        allow read, write, delete: if isAuthenticated() && isOwner(userId);
        
        // Allow emergency contacts to create notifications for this user
        allow create: if isAuthenticated() && 
          (isOwner(userId) || 
           request.resource.data.senderId == request.auth.uid);
      }
      
      // User settings subcollection
      match /settings/{settingId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // User activity logs subcollection  
      match /activity/{activityId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated();
      }
    }

    // User Settings collection - for user app settings and preferences (root level)
    match /userSettings/{userId} {
      // Allow users to read and write their own settings
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Allow creating settings document for authenticated user
      allow create: if isAuthenticated() && isOwner(userId);
      
            // Allow updates with basic validation only
      allow update: if isAuthenticated() && isOwner(userId);
    }

    // Guardian Keys collection - for contact lookup
    match /guardianKeys/{keyId} {
      // Allow reading guardian keys for contact discovery
      allow read: if isAuthenticated();
      
      // Only allow creating/updating your own guardian key record
      allow create, update: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow deleting only your own guardian key
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Ensure guardian key data integrity
      allow write: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['guardianKey', 'userId', 'displayName', 'email']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.guardianKey is string &&
        request.resource.data.guardianKey.size() == 8;
    }

    // SOS Alerts collection - emergency alerts
    match /sosAlerts/{alertId} {
      // Allow reading alerts if you're the sender or in the receivers list
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         request.auth.uid in resource.data.receiverIds);
      
      // Allow creating alerts if you're the sender
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.keys().hasAll(['senderId', 'senderName', 'senderKey', 'receiverIds', 'message', 'status', 'createdAt', 'type', 'priority']);
      
      // Allow updating alerts if you're involved (sender or receiver)
      allow update: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         request.auth.uid in resource.data.receiverIds);
      
      // Prevent deletion of SOS alerts for audit trail
      allow delete: if false;
      
      // Validate SOS alert data structure
      allow write: if isAuthenticated() &&
        request.resource.data.status in ['active', 'resolved', 'cancelled'] &&
        request.resource.data.type in ['manual', 'automatic', 'panic', 'voice-activation'] &&
        request.resource.data.priority in ['low', 'medium', 'high', 'critical'] &&
        request.resource.data.receiverIds is list &&
        request.resource.data.receiverIds.size() > 0;
    }

    // SOS Responses collection - responses to emergency alerts
    match /sosResponses/{responseId} {
      // Allow reading responses if you're involved in the original alert
      allow read: if isAuthenticated();
      
      // Allow creating responses if you're authenticated
      allow create: if isAuthenticated() && 
        request.resource.data.responderId == request.auth.uid &&
        request.resource.data.keys().hasAll(['alertId', 'responderId', 'responderName', 'response', 'timestamp']);
      
      // Allow updating your own responses
      allow update: if isAuthenticated() && 
        resource.data.responderId == request.auth.uid;
      
      // No deletion of responses for audit trail
      allow delete: if false;
      
      // Validate response data
      allow write: if isAuthenticated() &&
        request.resource.data.response in ['acknowledged', 'enroute', 'arrived', 'assisted'] &&
        request.resource.data.responderId == request.auth.uid;
    }

    // Emergency Contacts collection (if stored separately)
    match /emergencyContacts/{contactId} {
      // Allow users to manage their own emergency contacts
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }

    // Location Tracking collection - for safety monitoring
    match /locationTracking/{trackingId} {
      // Allow users to manage their own location data
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Allow emergency contacts to read location during active alerts
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/sosAlerts/$(trackingId)) &&
        request.auth.uid in get(/databases/$(database)/documents/sosAlerts/$(trackingId)).data.receiverIds;
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Auto-expire location data after 24 hours
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         request.time > resource.data.timestamp + duration.value(86400, 's'));
    }

    // Block any other collections not explicitly defined
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
