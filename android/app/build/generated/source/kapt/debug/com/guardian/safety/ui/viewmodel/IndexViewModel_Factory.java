// Generated by Dagger (https://dagger.dev).
package com.guardian.safety.ui.viewmodel;

import com.guardian.safety.data.auth.AuthRepository;
import com.guardian.safety.data.contacts.EmergencyContactRepository;
import com.guardian.safety.data.location.LocationRepository;
import com.guardian.safety.data.places.PlacesRepository;
import com.guardian.safety.data.routing.RoutingRepository;
import com.guardian.safety.services.SOSService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class IndexViewModel_Factory implements Factory<IndexViewModel> {
  private final Provider<AuthRepository> authRepositoryProvider;

  private final Provider<LocationRepository> locationRepositoryProvider;

  private final Provider<EmergencyContactRepository> emergencyContactRepositoryProvider;

  private final Provider<PlacesRepository> placesRepositoryProvider;

  private final Provider<RoutingRepository> routingRepositoryProvider;

  private final Provider<SOSService> sosServiceProvider;

  public IndexViewModel_Factory(Provider<AuthRepository> authRepositoryProvider,
      Provider<LocationRepository> locationRepositoryProvider,
      Provider<EmergencyContactRepository> emergencyContactRepositoryProvider,
      Provider<PlacesRepository> placesRepositoryProvider,
      Provider<RoutingRepository> routingRepositoryProvider,
      Provider<SOSService> sosServiceProvider) {
    this.authRepositoryProvider = authRepositoryProvider;
    this.locationRepositoryProvider = locationRepositoryProvider;
    this.emergencyContactRepositoryProvider = emergencyContactRepositoryProvider;
    this.placesRepositoryProvider = placesRepositoryProvider;
    this.routingRepositoryProvider = routingRepositoryProvider;
    this.sosServiceProvider = sosServiceProvider;
  }

  @Override
  public IndexViewModel get() {
    return newInstance(authRepositoryProvider.get(), locationRepositoryProvider.get(), emergencyContactRepositoryProvider.get(), placesRepositoryProvider.get(), routingRepositoryProvider.get(), sosServiceProvider.get());
  }

  public static IndexViewModel_Factory create(Provider<AuthRepository> authRepositoryProvider,
      Provider<LocationRepository> locationRepositoryProvider,
      Provider<EmergencyContactRepository> emergencyContactRepositoryProvider,
      Provider<PlacesRepository> placesRepositoryProvider,
      Provider<RoutingRepository> routingRepositoryProvider,
      Provider<SOSService> sosServiceProvider) {
    return new IndexViewModel_Factory(authRepositoryProvider, locationRepositoryProvider, emergencyContactRepositoryProvider, placesRepositoryProvider, routingRepositoryProvider, sosServiceProvider);
  }

  public static IndexViewModel newInstance(AuthRepository authRepository,
      LocationRepository locationRepository, EmergencyContactRepository emergencyContactRepository,
      PlacesRepository placesRepository, RoutingRepository routingRepository,
      SOSService sosService) {
    return new IndexViewModel(authRepository, locationRepository, emergencyContactRepository, placesRepository, routingRepository, sosService);
  }
}
