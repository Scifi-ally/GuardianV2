import { useEffect, useRef, useState, useCallback } from "react";
import { Wrapper } from "@googlemaps/react-wrapper";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Navigation,
  Locate,
  Volume2,
  VolumeX,
  MapPin,
  Shield,
  AlertTriangle,
  Maximize2,
  RotateCcw,
} from "lucide-react";
import { enhancedLocationService } from "@/services/enhancedLocationService";
import { enhancedFirebaseService } from "@/services/enhancedFirebaseService";
import { safeAIService } from "@/services/safeAIService";
import { notifications } from "@/services/enhancedNotificationService";
import { comprehensiveHeatmapService } from "@/services/comprehensiveHeatmapService";
import { stableGridHeatmapService } from "@/services/stableGridHeatmapService";
import { performanceMonitor } from "@/utils/performanceMonitor";
import { advancedSafeZonesController } from "@/services/advancedSafeZonesController";
import { cn } from "@/lib/utils";
import { toast } from "sonner";

const GOOGLE_MAPS_API_KEY =
  import.meta.env.VITE_GOOGLE_MAPS_API_KEY ||
  "AIzaSyA41wHVKnsb1RNhcftpHS5qNwvYz59nXIE";

// Load Google Maps with visualization library for heatmaps
const GOOGLE_MAPS_LIBRARIES: ("geometry" | "places" | "visualization")[] = [
  "geometry",
  "places",
  "visualization",
];

interface IntelligentGoogleMapProps {
  location?: { latitude: number; longitude: number; accuracy?: number };
  onLocationChange?: (location: {
    latitude: number;
    longitude: number;
  }) => void;
  onMapLoad?: (map: google.maps.Map) => void;
  className?: string;
  showTraffic?: boolean;
  showSafeZones?: boolean;
  showEmergencyServices?: boolean;
}

interface NavigationState {
  isNavigating: boolean;
  destination: google.maps.LatLng | null;
  currentRoute: google.maps.DirectionsResult | null;
  safetyScore: number;
  estimatedTime: string;
  totalDistance: string;
  nextInstruction?: string;
}

interface SafetyHeatmapData {
  location: google.maps.LatLng;
  weight: number;
  color: string;
  intensity: number;
  factors: {
    news: number;
    weather: number;
    time: number;
    crowd: number;
    lighting: number;
    police: number;
    crime: number;
  };
}

export function IntelligentGoogleMap({
  location,
  onLocationChange,
  onMapLoad,
  className,
  showTraffic = false,
  showSafeZones = false,
  showEmergencyServices = false,
}: IntelligentGoogleMapProps) {
  const mapRef = useRef<HTMLDivElement>(null);
  const [map, setMap] = useState<google.maps.Map | null>(null);
  const [userMarker, setUserMarker] = useState<google.maps.Marker | null>(null);
  const [destinationMarker, setDestinationMarker] =
    useState<google.maps.Marker | null>(null);
  const [directionsRenderer, setDirectionsRenderer] =
    useState<google.maps.DirectionsRenderer | null>(null);
  const [directionsService, setDirectionsService] =
    useState<google.maps.DirectionsService | null>(null);
  const [navigationState, setNavigationState] = useState<NavigationState>({
    isNavigating: false,
    destination: null,
    currentRoute: null,
    safetyScore: 75,
    estimatedTime: "",
    totalDistance: "",
  });
  const [isTracking, setIsTracking] = useState(false);
  const [currentHeading, setCurrentHeading] = useState(0);
  const [isNavigationMode, setIsNavigationMode] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [safetyOverlay, setSafetyOverlay] = useState<SafetyHeatmapData[]>([]);
  const [showControls, setShowControls] = useState(true);
  const [autoZoom, setAutoZoom] = useState(true);
  const [currentMapTheme, setCurrentMapTheme] = useState<"light" | "dark">(
    "light",
  );
  const [currentMapType, setCurrentMapType] = useState<"normal" | "satellite">(
    "normal",
  );
  const [trafficLayer, setTrafficLayer] =
    useState<google.maps.TrafficLayer | null>(null);
  const [heatmapLayer, setHeatmapLayer] =
    useState<google.maps.visualization.HeatmapLayer | null>(null);
  const [useStableGrid, setUseStableGrid] = useState(true); // Use new stable grid by default
  const [isPerformanceAnalyzed, setIsPerformanceAnalyzed] = useState(false);

  // Define map styles for different themes
  const getMapStyles = (theme: "light" | "dark") => {
    if (theme === "dark") {
      return [
        { elementType: "geometry", stylers: [{ color: "#242f3e" }] },
        { elementType: "labels.text.stroke", stylers: [{ color: "#242f3e" }] },
        { elementType: "labels.text.fill", stylers: [{ color: "#746855" }] },
        {
          featureType: "administrative.locality",
          elementType: "labels.text.fill",
          stylers: [{ color: "#d59563" }],
        },
        {
          featureType: "poi",
          elementType: "labels.text.fill",
          stylers: [{ color: "#d59563" }],
        },
        {
          featureType: "poi.park",
          elementType: "geometry",
          stylers: [{ color: "#263c3f" }],
        },
        {
          featureType: "poi.park",
          elementType: "labels.text.fill",
          stylers: [{ color: "#6b9a76" }],
        },
        {
          featureType: "road",
          elementType: "geometry",
          stylers: [{ color: "#38414e" }],
        },
        {
          featureType: "road",
          elementType: "geometry.stroke",
          stylers: [{ color: "#212a37" }],
        },
        {
          featureType: "road",
          elementType: "labels.text.fill",
          stylers: [{ color: "#9ca5b3" }],
        },
        {
          featureType: "road.highway",
          elementType: "geometry",
          stylers: [{ color: "#746855" }],
        },
        {
          featureType: "road.highway",
          elementType: "geometry.stroke",
          stylers: [{ color: "#1f2835" }],
        },
        {
          featureType: "road.highway",
          elementType: "labels.text.fill",
          stylers: [{ color: "#f3d19c" }],
        },
        {
          featureType: "transit",
          elementType: "geometry",
          stylers: [{ color: "#2f3948" }],
        },
        {
          featureType: "transit.station",
          elementType: "labels.text.fill",
          stylers: [{ color: "#d59563" }],
        },
        {
          featureType: "water",
          elementType: "geometry",
          stylers: [{ color: "#17263c" }],
        },
        {
          featureType: "water",
          elementType: "labels.text.fill",
          stylers: [{ color: "#515c6d" }],
        },
        {
          featureType: "water",
          elementType: "labels.text.stroke",
          stylers: [{ color: "#17263c" }],
        },
      ];
    } else {
      return [
        {
          featureType: "all",
          elementType: "geometry.fill",
          stylers: [{ color: "#f8f9fa" }],
        },
        {
          featureType: "road",
          elementType: "geometry",
          stylers: [{ color: "#ffffff" }],
        },
        {
          featureType: "road.highway",
          elementType: "geometry",
          stylers: [{ color: "#e9ecef" }],
        },
        {
          featureType: "water",
          elementType: "geometry",
          stylers: [{ color: "#adb5bd" }],
        },
        {
          featureType: "poi",
          elementType: "labels",
          stylers: [{ visibility: "simplified" }],
        },
        {
          featureType: "transit",
          elementType: "labels",
          stylers: [{ visibility: "simplified" }],
        },
      ];
    }
  };

  // Apply theme to existing map
  const applyMapTheme = (theme: "light" | "dark") => {
    if (map) {
      map.setOptions({
        styles: getMapStyles(theme),
      });
      setCurrentMapTheme(theme);
      console.log("Map theme applied:", theme);
    }
  };

  // Apply map type to existing map
  const applyMapType = (type: "normal" | "satellite") => {
    if (map) {
      const mapTypeId =
        type === "satellite"
          ? google.maps.MapTypeId.SATELLITE
          : google.maps.MapTypeId.ROADMAP;
      map.setMapTypeId(mapTypeId);
      setCurrentMapType(type);
      console.log("Map type applied:", type);
    }
  };

  // Listen for theme and type changes
  useEffect(() => {
    const handleThemeChange = (event: CustomEvent) => {
      applyMapTheme(event.detail.theme);
    };

    const handleTypeChange = (event: CustomEvent) => {
      applyMapType(event.detail.type);
    };

    window.addEventListener(
      "mapThemeChange",
      handleThemeChange as EventListener,
    );
    window.addEventListener("mapTypeChange", handleTypeChange as EventListener);

    return () => {
      window.removeEventListener(
        "mapThemeChange",
        handleThemeChange as EventListener,
      );
      window.removeEventListener(
        "mapTypeChange",
        handleTypeChange as EventListener,
      );
    };
  }, [map]);

  // Initialize enhanced map
  useEffect(() => {
    if (!mapRef.current || map) return;

    try {
      // Get initial theme and type from localStorage
      const savedTheme =
        (localStorage.getItem("guardian-map-theme") as "light" | "dark") ||
        "light";
      const savedType =
        (localStorage.getItem("guardian-map-type") as "normal" | "satellite") ||
        "normal";

      setCurrentMapTheme(savedTheme);
      setCurrentMapType(savedType);

      const mapTypeId =
        savedType === "satellite"
          ? google.maps.MapTypeId.SATELLITE
          : google.maps.MapTypeId.ROADMAP;

      const newMap = new google.maps.Map(mapRef.current, {
        zoom: 15,
        center: location
          ? { lat: location.latitude, lng: location.longitude }
          : { lat: 37.7749, lng: -122.4194 },
        mapTypeId: mapTypeId,
        styles: getMapStyles(savedTheme),
        disableDefaultUI: true,
        zoomControl: false,
        streetViewControl: false,
        fullscreenControl: false,
        mapTypeControl: false,
        gestureHandling: "greedy",
        clickableIcons: false,
        backgroundColor: "#f8f9fa",
        maxZoom: 20,
        minZoom: 3,
      });

      // Initialize direction services
      const directionsServiceInstance = new google.maps.DirectionsService();
      const directionsRendererInstance = new google.maps.DirectionsRenderer({
        map: newMap,
        suppressMarkers: true,
        polylineOptions: {
          strokeColor: "#2563eb", // Blue color for routes
          strokeWeight: 6,
          strokeOpacity: 0.8,
          geodesic: true,
          icons: [
            {
              icon: {
                path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                fillColor: "#2563eb",
                fillOpacity: 1,
                scale: 3,
                strokeColor: "#ffffff",
                strokeWeight: 1,
              },
              offset: "0%",
              repeat: "80px",
            },
          ],
        },
        panel: null,
        draggable: false,
      });

      setDirectionsService(directionsServiceInstance);
      setDirectionsRenderer(directionsRendererInstance);
      setMap(newMap);

      // Initialize advanced safe zones controller
      advancedSafeZonesController.initialize(newMap);

      onMapLoad?.(newMap);
    } catch (error) {
      console.error("❌ Failed to initialize map:", error);
    }
  }, [mapRef.current, location]);

  // Generate adaptive performance-optimized heatmap
  const generateSafetyHeatmap = useCallback(async () => {
    if (!map) return;

    try {
      console.log(
        `🔥 Generating ${useStableGrid ? "stable grid" : "circle heatmap"} heatmap...`,
      );

      // Analyze performance if not done yet
      if (!isPerformanceAnalyzed) {
        await performanceMonitor.analyzePerformance();
        setIsPerformanceAnalyzed(true);
      }

      const bounds = map.getBounds();
      if (!bounds) return;

      const zoom = map.getZoom() || 15;

      if (useStableGrid) {
        // Use new stable grid system
        stableGridHeatmapService.initialize(map);
        const gridCells = await stableGridHeatmapService.generateStableGrid(
          bounds,
          zoom,
        );

        if (gridCells.length === 0) {
          console.warn("No grid cells generated");
          toast.warning("No safety data available for this area");
          return;
        }

        console.log(
          `🔷 Generated ${gridCells.length} grid cells, rendered as connected squares`,
        );

        // Create safety overlay data from grid cells
        const safetyData: SafetyHeatmapData[] = gridCells.map((cell) => ({
          location: cell.center,
          weight: (100 - cell.safetyScore) / 100,
          color: cell.color,
          intensity: cell.opacity,
          factors: {
            news: cell.safetyScore * 0.8,
            weather: cell.safetyScore * 0.9,
            time: cell.safetyScore * 1.1,
            crowd: cell.safetyScore * 0.7,
            lighting: cell.safetyScore * 0.85,
            police: cell.safetyScore * 0.75,
            crime: cell.safetyScore * 0.95,
          },
        }));

        setSafetyOverlay(safetyData);

        // Start real-time updates
        stableGridHeatmapService.startRealTimeUpdates();

        // Subscribe to grid updates
        const unsubscribe = stableGridHeatmapService.subscribe(
          (updatedCells) => {
            if (updatedCells.length > 0) {
              const updatedData: SafetyHeatmapData[] = updatedCells.map(
                (cell) => ({
                  location: cell.center,
                  weight: (100 - cell.safetyScore) / 100,
                  color: cell.color,
                  intensity: cell.opacity,
                  factors: {
                    news: cell.safetyScore * 0.8,
                    weather: cell.safetyScore * 0.9,
                    time: cell.safetyScore * 1.1,
                    crowd: cell.safetyScore * 0.7,
                    lighting: cell.safetyScore * 0.85,
                    police: cell.safetyScore * 0.75,
                    crime: cell.safetyScore * 0.95,
                  },
                }),
              );
              setSafetyOverlay(updatedData);
            }
          },
        );

        const stats = stableGridHeatmapService.getGridStats();
        toast.success(
          `🔷 Grid heatmap: ${stats.totalCells} cells | ${stats.cellSize} | Avg safety: ${stats.averageSafety}%`,
        );

        return () => {
          unsubscribe();
        };
      } else {
        // Use original circle heatmap system
        const optimalSettings = performanceMonitor.getOptimalHeatmapSettings();

        console.log("📊 Using adaptive settings:", optimalSettings);

        // Show quick preview if recommended
        if (optimalSettings.usePreview) {
          const quickPreview = comprehensiveHeatmapService.generateQuickPreview(
            bounds,
            zoom,
          );
          if (quickPreview.length > 0) {
            const previewData: SafetyHeatmapData[] = quickPreview.map(
              (point) => ({
                location: point.location,
                weight: point.weight,
                color: point.color,
                intensity: point.intensity,
                factors: {
                  news: point.safetyScore * 0.8,
                  weather: point.safetyScore * 0.9,
                  time: point.safetyScore * 1.1,
                  crowd: point.safetyScore * 0.7,
                  lighting: point.safetyScore * 0.85,
                  police: point.safetyScore * 0.75,
                  crime: point.safetyScore * 0.95,
                },
              }),
            );
            setSafetyOverlay(previewData);
            toast.success(`⚡ Quick preview: ${previewData.length} points`);
          }
        }

        // Generate performance-optimized comprehensive heatmap
        const metrics = performanceMonitor.getCurrentMetrics();
        const devicePerformance = metrics?.performanceLevel || "medium";

        const heatmapPoints =
          await comprehensiveHeatmapService.generateAdaptiveHeatmap(
            bounds,
            zoom,
            devicePerformance,
          );

        // Convert to our interface format
        const heatmapData: SafetyHeatmapData[] = heatmapPoints.map((point) => ({
          location: point.location,
          weight: point.weight,
          color: point.color,
          intensity: point.intensity,
          factors: {
            news: point.safetyScore * 0.8,
            weather: point.safetyScore * 0.9,
            time: point.safetyScore * 1.1,
            crowd: point.safetyScore * 0.7,
            lighting: point.safetyScore * 0.85,
            police: point.safetyScore * 0.75,
            crime: point.safetyScore * 0.95,
          },
        }));

        setSafetyOverlay(heatmapData);

        // Start real-time updates if performance allows
        if (optimalSettings.enableRealTimeUpdates) {
          comprehensiveHeatmapService.startRealTimeUpdates(
            optimalSettings.updateInterval,
          );
        }

        const stats = comprehensiveHeatmapService.getHeatmapStats();
        toast.success(
          `🔥 Circle heatmap: ${stats.totalPoints} points | ${stats.coverage} | Avg safety: ${stats.averageSafety}%`,
        );
      }
    } catch (error) {
      console.error("Failed to generate adaptive heatmap:", error);
      toast.error("Heatmap temporarily unavailable");
    }
  }, [map, isPerformanceAnalyzed, useStableGrid]);

  // Handle map settings changes (traffic, safe zones, etc.)
  useEffect(() => {
    if (!map) return;

    // Traffic Layer
    if (showTraffic) {
      if (!trafficLayer) {
        const newTrafficLayer = new google.maps.TrafficLayer();
        newTrafficLayer.setMap(map);
        setTrafficLayer(newTrafficLayer);
        console.log("Traffic layer enabled");
      }
    } else {
      if (trafficLayer) {
        trafficLayer.setMap(null);
        setTrafficLayer(null);
        console.log("Traffic layer disabled");
      }
    }

    // Safe Zones - Advanced Controller
    advancedSafeZonesController.toggleSafeZones(showSafeZones);

    // Emergency Services (would show markers for hospitals, police, fire stations)
    if (showEmergencyServices) {
      // In a real implementation, this would fetch emergency services data
      console.log("Emergency services enabled");
    }
  }, [
    map,
    showTraffic,
    showSafeZones,
    showEmergencyServices,
    trafficLayer,
    heatmapLayer,
    generateSafetyHeatmap,
  ]);

  // Handle map zoom changes for stable grid
  useEffect(() => {
    if (!map) return;

    const zoomChangedListener = map.addListener("zoom_changed", () => {
      const currentZoom = map.getZoom() || 15;
      const currentBounds = map.getBounds();

      if (currentBounds && safetyOverlay.length > 0) {
        if (useStableGrid) {
          // Handle zoom change for stable grid - only regenerate if necessary
          stableGridHeatmapService.handleZoomChange(currentZoom);
        } else {
          // For circle heatmap, regenerate on significant zoom changes
          generateSafetyHeatmap();
        }
      }
    });

    return () => {
      google.maps.event.removeListener(zoomChangedListener);
    };
  }, [map, safetyOverlay, useStableGrid, generateSafetyHeatmap]);

  // Cleanup when switching heatmap types
  useEffect(() => {
    return () => {
      if (useStableGrid) {
        stableGridHeatmapService.cleanup();
      } else {
        comprehensiveHeatmapService.stopRealTimeUpdates();
        comprehensiveHeatmapService.clearHeatmapData();
      }
    };
  }, [useStableGrid]);

  // Create and update user location marker
  useEffect(() => {
    if (!map || !location) return;

    if (userMarker) {
      // Update existing marker position smoothly
      const newPosition = new google.maps.LatLng(
        location.latitude,
        location.longitude,
      );

      // Smooth animation to new position
      animateMarkerToPosition(userMarker, newPosition);
    } else {
      // Create new user marker
      const marker = new google.maps.Marker({
        position: { lat: location.latitude, lng: location.longitude },
        map,
        title: `Your location (±${Math.round(location.accuracy || 0)}m)`,
        icon: createUserLocationIcon(false),
        zIndex: 10000,
        optimized: false,
      });

      setUserMarker(marker);
    }
  }, [map, location]);

  // Update marker icon when navigation state changes
  useEffect(() => {
    if (!userMarker) return;

    const icon = createUserLocationIcon(navigationState.isNavigating);
    userMarker.setIcon(icon);
  }, [userMarker, navigationState.isNavigating, currentHeading]);

  // Handle navigation start
  const startNavigation = useCallback(
    async (
      destination: google.maps.LatLng,
      routeAnalysis: any,
    ): Promise<void> => {
      if (!map || !directionsService || !directionsRenderer || !location) {
        console.warn("Navigation services not ready");
        return;
      }

      try {
        // Calculate route
        const result = await new Promise<google.maps.DirectionsResult>(
          (resolve, reject) => {
            directionsService.route(
              {
                origin: { lat: location.latitude, lng: location.longitude },
                destination: destination,
                travelMode: google.maps.TravelMode.WALKING,
                unitSystem: google.maps.UnitSystem.METRIC,
                optimizeWaypoints: true,
              },
              (result, status) => {
                if (status === google.maps.DirectionsStatus.OK && result) {
                  resolve(result);
                } else {
                  reject(new Error(`Directions failed: ${status}`));
                }
              },
            );
          },
        );

        // Display route
        directionsRenderer.setDirections(result);

        // Create destination marker
        if (destinationMarker) {
          destinationMarker.setMap(null);
        }

        const destMarker = new google.maps.Marker({
          position: destination,
          map,
          title: "Destination",
          icon: createDestinationIcon(),
          zIndex: 9999,
        });

        setDestinationMarker(destMarker);

        // Update navigation state
        const route = result.routes[0];
        const leg = route.legs[0];

        setNavigationState({
          isNavigating: true,
          destination,
          currentRoute: result,
          safetyScore: routeAnalysis.overallSafety,
          estimatedTime: leg.duration?.text || "Unknown",
          totalDistance: leg.distance?.text || "Unknown",
          nextInstruction: leg.steps[0]?.instructions || "",
        });

        // Enable navigation mode
        setIsNavigationMode(true);
        setIsTracking(true);

        // Auto-zoom to route if enabled
        if (autoZoom) {
          const bounds = new google.maps.LatLngBounds();
          bounds.extend({ lat: location.latitude, lng: location.longitude });
          bounds.extend(destination);
          map.fitBounds(bounds, { top: 80, right: 40, bottom: 200, left: 40 });

          // Zoom in after fitting bounds
          setTimeout(() => {
            map.setZoom(18);
            map.setCenter({ lat: location.latitude, lng: location.longitude });
          }, 1000);
        }

        // Start enhanced location tracking
        startEnhancedTracking();

        // Navigation started successfully
      } catch (error) {
        console.error("❌ Navigation start failed:", error);
        console.error("Failed to start navigation:", error);
      }
    },
    [map, directionsService, directionsRenderer, location, autoZoom],
  );

  // Stop navigation
  const stopNavigation = useCallback(() => {
    setNavigationState({
      isNavigating: false,
      destination: null,
      currentRoute: null,
      safetyScore: 75,
      estimatedTime: "",
      totalDistance: "",
    });

    setIsNavigationMode(false);
    setIsTracking(false);

    // Clear map elements
    if (directionsRenderer) {
      directionsRenderer.setDirections({ routes: [] } as any);
    }

    if (destinationMarker) {
      destinationMarker.setMap(null);
      setDestinationMarker(null);
    }

    // Reset map view
    if (map && location) {
      map.setZoom(15);
      map.setCenter({ lat: location.latitude, lng: location.longitude });
      map.setTilt(0);
      map.setHeading(0);
    }

    enhancedLocationService.stopTracking();
    // Navigation stopped successfully
  }, [directionsRenderer, destinationMarker, map, location]);

  // Enhanced location tracking
  const startEnhancedTracking = useCallback(() => {
    enhancedLocationService.startTracking();

    const unsubscribe = enhancedLocationService.subscribe((locationData) => {
      const newLocation = {
        latitude: locationData.latitude,
        longitude: locationData.longitude,
      };

      onLocationChange?.(newLocation);

      // Update heading for navigation
      if (locationData.heading !== undefined) {
        setCurrentHeading(locationData.heading);
      }

      // Auto-follow during navigation
      if (map && isNavigationMode && autoZoom) {
        const position = new google.maps.LatLng(
          locationData.latitude,
          locationData.longitude,
        );

        map.panTo(position);

        // 3D navigation view
        if (locationData.heading !== undefined) {
          map.setHeading(locationData.heading);
          map.setTilt(45);
        }
      }
    });

    return unsubscribe;
  }, [map, isNavigationMode, autoZoom, onLocationChange]);

  // Render safety heatmap overlay
  useEffect(() => {
    if (!map || !safetyOverlay.length) return;

    // Clear existing heatmap
    if (heatmapLayer) {
      heatmapLayer.setMap(null);
    }

    try {
      // Create weighted locations for Google Maps heatmap
      const weightedLocations = safetyOverlay.map((point) => ({
        location: point.location,
        weight: point.intensity || point.weight, // Use intensity for better visualization
      }));

      console.log(
        `🔥 Rendering enhanced heatmap with ${weightedLocations.length} weighted points`,
      );

      // Get optimal settings for smooth heatmap visualization
      const zoom = map.getZoom() || 15;
      // Much larger radius for better coverage and blending
      const optimalRadius = Math.max(80, Math.min(250, 120 + (zoom - 10) * 20));

      console.log(`🔥 Using radius: ${optimalRadius}px for zoom level ${zoom}`);

      // Create new heatmap layer with enhanced visualization and better blending
      const newHeatmapLayer = new google.maps.visualization.HeatmapLayer({
        data: weightedLocations,
        map: map,
        radius: optimalRadius,
        opacity: 0.6, // Lower opacity for better map visibility
        gradient: [
          "rgba(0, 0, 0, 0)", // Transparent (safe areas)
          "rgba(34, 197, 94, 0.1)", // Very light green (very safe)
          "rgba(34, 197, 94, 0.25)", // Light green (safe)
          "rgba(132, 204, 22, 0.35)", // Lime green (mostly safe)
          "rgba(234, 179, 8, 0.45)", // Yellow (caution)
          "rgba(245, 158, 11, 0.55)", // Amber (warning)
          "rgba(249, 115, 22, 0.65)", // Orange (concern)
          "rgba(239, 68, 68, 0.75)", // Red (danger)
          "rgba(220, 38, 38, 0.85)", // Dark red (high danger)
          "rgba(185, 28, 28, 0.95)", // Very dark red (extreme danger)
        ],
        maxIntensity: 0.6, // Lower max intensity for smoother gradients
        dissipating: true, // Enable natural heat dissipation for smooth blending
      });

      setHeatmapLayer(newHeatmapLayer);

      // Subscribe to real-time updates
      const unsubscribe = comprehensiveHeatmapService.subscribe(
        (updatedPoints) => {
          if (updatedPoints.length > 0) {
            const updatedData: SafetyHeatmapData[] = updatedPoints.map(
              (point) => ({
                location: point.location,
                weight: point.weight,
                color: point.color,
                intensity: point.intensity,
                factors: {
                  news: point.safetyScore * 0.8,
                  weather: point.safetyScore * 0.9,
                  time: point.safetyScore * 1.1,
                  crowd: point.safetyScore * 0.7,
                  lighting: point.safetyScore * 0.85,
                  police: point.safetyScore * 0.75,
                  crime: point.safetyScore * 0.95,
                },
              }),
            );
            setSafetyOverlay(updatedData);
          }
        },
      );

      return () => {
        unsubscribe();
      };
    } catch (error) {
      console.error("Failed to render heatmap:", error);
      toast.error(
        "Heatmap visualization failed - check if visualization library is loaded",
      );
    }
  }, [map, safetyOverlay, heatmapLayer]);

  // Helper functions
  const animateMarkerToPosition = (
    marker: google.maps.Marker,
    newPosition: google.maps.LatLng,
  ) => {
    const currentPosition = marker.getPosition();
    if (!currentPosition) return;

    const steps = 20;
    const deltaLat = (newPosition.lat() - currentPosition.lat()) / steps;
    const deltaLng = (newPosition.lng() - currentPosition.lng()) / steps;

    let step = 0;
    const animateStep = () => {
      if (step <= steps) {
        const intermediatePosition = new google.maps.LatLng(
          currentPosition.lat() + deltaLat * step,
          currentPosition.lng() + deltaLng * step,
        );
        marker.setPosition(intermediatePosition);
        step++;
        requestAnimationFrame(animateStep);
      }
    };

    animateStep();
  };

  const createUserLocationIcon = (isNavigating: boolean) => {
    const size = isNavigating ? 28 : 24;
    const pulseColor = isNavigating ? "#2563eb" : "#22c55e";

    return {
      url: `data:image/svg+xml,${encodeURIComponent(`
        <svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="${size / 2}" cy="${size / 2}" r="${size / 2 - 2}" fill="rgba(37, 99, 235, 0.2)" stroke="${pulseColor}" stroke-width="2"/>
          <circle cx="${size / 2}" cy="${size / 2}" r="${size / 3}" fill="${pulseColor}" stroke="white" stroke-width="2"/>
          <circle cx="${size / 2}" cy="${size / 2}" r="${size / 6}" fill="white"/>
          ${
            isNavigating
              ? `
            <path d="M${size / 2} 4 L${size / 2 + 4} ${size / 2 + 2} L${size / 2} ${size / 2 - 1} L${size / 2 - 4} ${size / 2 + 2} Z"
                  fill="${pulseColor}" stroke="white" stroke-width="1"
                  transform="rotate(${currentHeading} ${size / 2} ${size / 2})"/>
          `
              : ""
          }
        </svg>
      `)}`,
      scaledSize: new google.maps.Size(size, size),
      anchor: new google.maps.Point(size / 2, size / 2),
    };
  };

  const createDestinationIcon = () => {
    return {
      url: `data:image/svg+xml,${encodeURIComponent(`
        <svg width="32" height="40" viewBox="0 0 32 40" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M16 0C7.16 0 0 7.16 0 16C0 28 16 40 16 40S32 28 32 16C32 7.16 24.84 0 16 0Z" fill="#dc2626"/>
          <circle cx="16" cy="16" r="6" fill="white"/>
          <circle cx="16" cy="16" r="3" fill="#dc2626"/>
        </svg>
      `)}`,
      scaledSize: new google.maps.Size(32, 40),
      anchor: new google.maps.Point(16, 40),
    };
  };

  const recenterMap = () => {
    if (map && location) {
      const position = new google.maps.LatLng(
        location.latitude,
        location.longitude,
      );
      map.panTo(position);
      map.setZoom(isNavigationMode ? 18 : 15);
    }
  };

  const toggleNavigationMode = () => {
    if (isNavigationMode) {
      stopNavigation();
    } else {
      setIsNavigationMode(true);
      setIsTracking(true);
      startEnhancedTracking();
    }
  };

  if (!GOOGLE_MAPS_API_KEY) {
    return (
      <div className="w-full h-full bg-red-100 rounded-lg flex items-center justify-center">
        <div className="text-center">
          <AlertTriangle className="h-8 w-8 text-red-500 mx-auto mb-2" />
          <p className="text-sm text-red-600 font-semibold">
            Google Maps API key required
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className={cn("relative w-full h-full", className)}>
      <Wrapper apiKey={GOOGLE_MAPS_API_KEY} libraries={GOOGLE_MAPS_LIBRARIES}>
        <div ref={mapRef} className="w-full h-full" />

        {/* Navigation Status - Top Left */}
        {navigationState.isNavigating && (
          <Card className="absolute top-4 left-4 z-[1000] bg-white/95 backdrop-blur-sm shadow-lg">
            <CardContent className="p-3">
              <div className="flex items-center gap-2 mb-2">
                <Navigation className="h-4 w-4 text-blue-600" />
                <span className="text-sm font-medium">Navigating</span>
                <Badge
                  variant={
                    navigationState.safetyScore >= 70
                      ? "default"
                      : "destructive"
                  }
                  className={
                    navigationState.safetyScore >= 70
                      ? "bg-green-600"
                      : "bg-orange-600"
                  }
                >
                  {navigationState.safetyScore}/100
                </Badge>
              </div>
              <div className="space-y-1 text-xs text-muted-foreground">
                <div>
                  Distance: {navigationState.totalDistance} •{" "}
                  {navigationState.estimatedTime}
                </div>
                {navigationState.nextInstruction && (
                  <div className="font-medium text-foreground">
                    {navigationState.nextInstruction.replace(/<[^>]*>/g, "")}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Safety Score - Top Right */}
        {!navigationState.isNavigating && location && (
          <Card className="absolute top-4 right-4 z-[1000] bg-white/95 backdrop-blur-sm shadow-lg">
            <CardContent className="p-3">
              <div className="flex items-center gap-2">
                <Shield className="h-4 w-4 text-green-500" />
                <div className="text-xs">
                  <div className="text-muted-foreground">Area Safety</div>
                  <div className="font-medium text-green-600">Safe Zone</div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Map Controls - Bottom Right */}
        {showControls && (
          <div className="absolute bottom-20 right-4 z-[1000] flex flex-col gap-2">
            <Button
              onClick={recenterMap}
              size="sm"
              variant="outline"
              className="bg-white/95 backdrop-blur-sm shadow-lg h-10 w-10 p-0"
            >
              <Locate className="h-4 w-4" />
            </Button>

            {navigationState.isNavigating && (
              <>
                <Button
                  onClick={() => setIsMuted(!isMuted)}
                  size="sm"
                  variant="outline"
                  className="bg-white/95 backdrop-blur-sm shadow-lg h-10 w-10 p-0"
                >
                  {isMuted ? (
                    <VolumeX className="h-4 w-4" />
                  ) : (
                    <Volume2 className="h-4 w-4" />
                  )}
                </Button>

                <Button
                  onClick={() => setAutoZoom(!autoZoom)}
                  size="sm"
                  variant={autoZoom ? "default" : "outline"}
                  className="bg-white/95 backdrop-blur-sm shadow-lg h-10 w-10 p-0"
                >
                  <Maximize2 className="h-4 w-4" />
                </Button>

                <Button
                  onClick={stopNavigation}
                  size="sm"
                  variant="destructive"
                  className="h-10 w-10 p-0"
                >
                  <RotateCcw className="h-4 w-4" />
                </Button>
              </>
            )}

            {/* Heatmap Type Toggle */}
            <Button
              onClick={() => setUseStableGrid(!useStableGrid)}
              size="sm"
              variant={useStableGrid ? "default" : "outline"}
              className="bg-white/95 backdrop-blur-sm shadow-lg h-10 w-10 p-0"
              title={
                useStableGrid ? "Using Grid Heatmap" : "Using Circle Heatmap"
              }
            >
              {useStableGrid ? "⬜" : "⚫"}
            </Button>
          </div>
        )}

        {/* Real-time Location Status - Bottom Left */}
        {isTracking && (
          <Card className="absolute bottom-4 left-4 z-[1000] bg-white/95 backdrop-blur-sm shadow-lg">
            <CardContent className="p-2">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 rounded-full bg-green-500 animate-pulse" />
                <span className="text-xs font-medium">Live Tracking</span>
              </div>
            </CardContent>
          </Card>
        )}
      </Wrapper>

      {/* Component ready for navigation */}
    </div>
  );
}

export default IntelligentGoogleMap;
